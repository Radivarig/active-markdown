fs = require 'fs'




assembleViewer = (opts) ->
    { input_file_name, inline, markup} = opts

    if inline
        styles  = readViewerFile('style.css')
        scripts = readViewerFile('script.js')
        styles  = "<style>#{ styles }</style>"
        scripts = "<script>#{ scripts }</script>"
    else
        styles  = "<link rel='stylesheet' href='style.css'>"
        scripts = "<script src='script.js'></script>"

    compiled_template = readViewerFile('template.js')
    template_fn = Function(compiled_template)

    now = (new Date()).toISOString()

    markup_output = """<!--
            This file was generated by Active Markdown - http://activemarkdown.org

            #{input_file_name} - #{now}
            -->\n
        """

    markup_output += template_fn.call
        page_title  : input_file_name
        styles      : styles
        script      : scripts
        markup      : markup


    return markup_output




readViewerFile = (name) ->
    return fs.readFileSync('../viewer/' + name, 'utf-8').toString()



outputCompiledFile = (input_file_name, markup, inline=false) ->

    html_output = assembleViewer
        input_file_name     : input_file_name
        inline              : inline
        markup              : markup

    if process.stdout.isTTY
        output_file_path = '../viewer/output.html'
        fs.writeFileSync(output_file_path, html_output, 'utf-8')
    else
        process.stdout.write(html_output)



if process.stdin.isTTY
    markup = """
        <p>
            <span class="AMDElement" data-config="var_name: -20..20 by 2">5 blue</span>
        </p>
        <p>
            asdf <em>as</em> df
            <span class="AMDElement" data-config="var_name"></span>
        </p>
    """
    input_file_name = 'foo.md'
    outputCompiledFile(input_file_name, markup)
else
    process.stdin.resume()
    process.stdin.setEncoding('utf8')

    markdown_source = ''
    process.stdin.on 'data', (chunk) ->
        markdown_source += chunk

    process.stdin.on 'end', ->
        markup = markdown_source
        outputCompiledFile('stdin', markup)




